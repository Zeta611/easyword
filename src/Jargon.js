// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Belt_List from "../node_modules/rescript/lib/es6/belt_List.js";
import * as Reactfire from "reactfire";
import * as Belt_Array from "../node_modules/rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "../node_modules/rescript/lib/es6/belt_Option.js";
import * as Belt_HashMapString from "../node_modules/rescript/lib/es6/belt_HashMapString.js";
import * as Firestore from "firebase/firestore";

function constructForest(comments) {
  var roots = {
    contents: /* [] */0
  };
  var commentNodeTable = Belt_HashMapString.make(10);
  Belt_Array.forEach(comments, (function (comment) {
          var node = {
            comment: comment,
            parent: undefined,
            children: /* [] */0
          };
          Belt_HashMapString.set(commentNodeTable, comment.id, node);
          if (comment.parent === "") {
            roots.contents = Belt_List.add(roots.contents, node);
            return ;
          }
          
        }));
  Belt_HashMapString.forEach(commentNodeTable, (function (param, node) {
          var parent = node.comment.parent;
          if (parent === "") {
            return ;
          }
          var parentNode = Belt_Option.getExn(Belt_HashMapString.get(commentNodeTable, parent));
          parentNode.children = Belt_List.add(parentNode.children, node);
          node.parent = parentNode;
        }));
  return [
          roots,
          commentNodeTable
        ];
}

function makeComment(param) {
  var match = param.comment;
  var children = param.children;
  return React.createElement("div", {
              key: match.id,
              className: "ml-4"
            }, React.createElement("div", {
                  className: "grid grid-cols-2"
                }, React.createElement("div", undefined, match.user), React.createElement("div", undefined, match.timestamp.toDate().toDateString()), React.createElement("div", undefined, match.comment)), React.createElement("div", undefined, makeSiblings(children)));
}

function makeSiblings(siblings) {
  return React.createElement("div", undefined, Belt_Array.map(Belt_List.toArray(siblings), makeComment));
}

function Jargon(Props) {
  var id = Props.id;
  var firestore = Reactfire.useFirestore();
  var jargonDoc = Firestore.doc(firestore, "jargons/" + id + "");
  var match = Reactfire.useFirestoreDocData(jargonDoc);
  var match$1 = match.data;
  var commentsCollection = Firestore.collection(firestore, "jargons/" + id + "/comments");
  var match$2 = Reactfire.useFirestoreCollectionData(Firestore.query(commentsCollection, Firestore.orderBy("timestamp", "asc")), {
        idField: "id"
      });
  if (match.status === "loading" || match$2.status === "loading") {
    return "loading";
  }
  var match$3 = constructForest(match$2.data);
  return React.createElement("div", {
              className: "dark:text-white"
            }, React.createElement("div", {
                  className: "flex gap-3"
                }, React.createElement("div", {
                      className: "flex-none"
                    }, match$1.english), React.createElement("div", {
                      className: "flex-none"
                    }, match$1.korean)), makeSiblings(match$3[0].contents));
}

var make = Jargon;

export {
  constructForest ,
  makeComment ,
  makeSiblings ,
  make ,
}
/* react Not a pure module */
