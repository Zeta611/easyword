// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "../node_modules/rescript/lib/es6/curry.js";
import * as React from "react";
import * as Loader from "./Loader.js";
import * as Navbar from "./Navbar.js";
import * as Firebase from "./Firebase.js";
import * as Belt_List from "../node_modules/rescript/lib/es6/belt_List.js";
import * as Reactfire from "reactfire";
import * as Belt_Array from "../node_modules/rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "../node_modules/rescript/lib/es6/belt_Option.js";
import * as Caml_option from "../node_modules/rescript/lib/es6/caml_option.js";
import * as Belt_HashMapString from "../node_modules/rescript/lib/es6/belt_HashMapString.js";
import * as Firestore from "firebase/firestore";

function constructForest(comments) {
  var roots = {
    contents: /* [] */0
  };
  var commentNodeTable = Belt_HashMapString.make(10);
  Belt_Array.forEach(comments, (function (comment) {
          var node = {
            comment: comment,
            parent: undefined,
            children: /* [] */0
          };
          Belt_HashMapString.set(commentNodeTable, comment.id, node);
          if (comment.parent === "") {
            roots.contents = Belt_List.add(roots.contents, node);
            return ;
          }
          
        }));
  Belt_HashMapString.forEach(commentNodeTable, (function (param, node) {
          var parent = node.comment.parent;
          if (parent === "") {
            return ;
          }
          var parentNode = Belt_Option.getExn(Belt_HashMapString.get(commentNodeTable, parent));
          parentNode.children = Belt_List.add(parentNode.children, node);
          node.parent = parentNode;
        }));
  return [
          roots,
          commentNodeTable
        ];
}

function makeComment(param) {
  var match = param.comment;
  var children = param.children;
  return React.createElement("div", {
              key: match.id
            }, React.createElement("div", {
                  className: "grid grid-cols-2"
                }, React.createElement("div", undefined, match.user), React.createElement("div", undefined, match.timestamp.toDate().toDateString()), React.createElement("div", undefined, match.comment)), React.createElement("div", {
                  className: "ml-4"
                }, makeSiblings(children)));
}

function makeSiblings(siblings) {
  return React.createElement("div", undefined, Belt_Array.map(Belt_List.toArray(siblings), makeComment));
}

var $$Window = {};

function Jargon$CommentInput(Props) {
  var id = Props.id;
  var signInData = Props.signInData;
  var match = React.useState(function () {
        return "";
      });
  var setComment = match[1];
  var comment = match[0];
  var handleInputChange = function ($$event) {
    var value = $$event.currentTarget.value;
    Curry._1(setComment, (function (param) {
            return value;
          }));
  };
  var firestore = Reactfire.useFirestore();
  var commentsCollection = Firestore.collection(firestore, "jargons/" + id + "/comments");
  var handleSubmit = function ($$event) {
    $$event.preventDefault();
    if (signInData !== undefined) {
      if (signInData.signedIn) {
        var match = signInData.user;
        var email = Belt_Option.getWithDefault(match.email, Belt_Option.getWithDefault(Belt_Option.flatMap(Belt_Array.get(match.providerData, 0), Firebase.User.email), match.uid));
        Firestore.addDoc(commentsCollection, {
              comment: comment,
              user: email,
              timestamp: Firestore.Timestamp.fromDate(new Date()),
              parent: ""
            });
        return ;
      }
      window.alert("You need to be signed in to comment!");
      return ;
    }
    window.alert("You need to be signed in to comment!");
  };
  return React.createElement("form", {
              onSubmit: handleSubmit
            }, React.createElement("div", {
                  className: "p-2 gap-3 grid grid-cols-1 place-items-end"
                }, React.createElement("textarea", {
                      className: "h-24 p-1 border place-self-stretch",
                      id: "comment",
                      name: "comment",
                      placeholder: "여러분의 생각은 어떠신가요?",
                      value: comment,
                      onChange: handleInputChange
                    }), React.createElement("input", {
                      className: "px-1 rounded-md bg-zinc-200 hover:bg-zinc-300",
                      type: "submit",
                      value: "Comment"
                    })));
}

var CommentInput = {
  make: Jargon$CommentInput
};

function Jargon(Props) {
  var id = Props.id;
  var firestore = Reactfire.useFirestore();
  var jargonDoc = Firestore.doc(firestore, "jargons/" + id + "");
  var match = Reactfire.useFirestoreDocData(jargonDoc);
  var jargons = match.data;
  var commentsCollection = Firestore.collection(firestore, "jargons/" + id + "/comments");
  var match$1 = Reactfire.useFirestoreCollectionData(Firestore.query(commentsCollection, Firestore.orderBy("timestamp", "asc")), {
        idField: "id"
      });
  var comments = match$1.data;
  var match$2 = Reactfire.useSigninCheck();
  var signInData = match$2.data;
  if (match.status === "success" && match$1.status === "success" && match$2.status === "success") {
    if (jargons === undefined) {
      return null;
    }
    if (comments === undefined) {
      return null;
    }
    var match$3 = constructForest(Caml_option.valFromOption(comments));
    return React.createElement("div", undefined, signInData !== undefined ? (
                  signInData.signedIn ? React.createElement(Navbar.make, {
                          signedIn: true
                        }) : React.createElement(Navbar.make, {
                          signedIn: false
                        })
                ) : React.createElement(Navbar.make, {
                      signedIn: false
                    }), React.createElement("main", {
                    className: "grid p-5 gap-3 dark:text-white"
                  }, React.createElement("h1", {
                        className: "grid gap-1"
                      }, React.createElement("div", {
                            className: "text-3xl font-bold"
                          }, jargons.english), React.createElement("div", {
                            className: "text-2xl font-medium"
                          }, jargons.korean)), React.createElement(Jargon$CommentInput, {
                        id: id,
                        signInData: signInData
                      }), React.createElement("div", undefined, makeSiblings(match$3[0].contents))));
  }
  return React.createElement("div", {
              className: "h-screen grid justify-center content-center"
            }, React.createElement(Loader.make, {}));
}

var make = Jargon;

export {
  constructForest ,
  makeComment ,
  makeSiblings ,
  $$Window ,
  CommentInput ,
  make ,
}
/* react Not a pure module */
