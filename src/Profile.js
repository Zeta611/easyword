// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Reactfire from "reactfire";
import * as Belt_Option from "../node_modules/rescript/lib/es6/belt_Option.js";
import * as SignInContext from "./SignInContext.js";
import * as Auth from "firebase/auth";
import * as JsxRuntime from "react/jsx-runtime";
import * as Caml_js_exceptions from "../node_modules/rescript/lib/es6/caml_js_exceptions.js";
import * as Firestore from "firebase/firestore";
import * as RescriptReactRouter from "../node_modules/@rescript/react/src/RescriptReactRouter.js";

function Profile(props) {
  var match = React.useContext(SignInContext.context);
  var user = match.user;
  var signedIn = match.signedIn;
  var match$1 = React.useState(function () {
        return "";
      });
  var setDisplayName = match$1[1];
  var displayName = match$1[0];
  var handleDisplayNameChange = function ($$event) {
    var value = $$event.currentTarget.value;
    setDisplayName(function (param) {
          return value;
        });
  };
  var match$2 = React.useState(function () {
        return "";
      });
  var setEmail = match$2[1];
  var match$3 = React.useState(function () {
        return false;
      });
  var setDisabled = match$3[1];
  var firestore = Reactfire.useFirestore();
  var handleSubmit = function ($$event) {
    $$event.preventDefault();
    if (displayName.length < 3) {
      window.alert("필명은 세 글자 이상이어야 해요");
      return ;
    }
    if (!signedIn) {
      return RescriptReactRouter.replace("/login");
    }
    if (user == null) {
      return RescriptReactRouter.replace("/logout");
    }
    var email = user.email;
    var uid = user.uid;
    setDisabled(function (param) {
          return true;
        });
    ((async function (param) {
            try {
              var authUpdate = Auth.updateProfile(user, {
                    displayName: displayName
                  });
              var docUpdate = (async function (param) {
                    var userDocRef = Firestore.doc(firestore, "users/" + uid + "");
                    var userDoc = await Firestore.getDoc(userDocRef);
                    if (userDoc.exists()) {
                      return await Firestore.updateDoc(userDocRef, {
                                  displayName: displayName
                                });
                    } else {
                      return await Firestore.setDoc(userDocRef, {
                                  displayName: displayName,
                                  email: email
                                });
                    }
                  })(undefined);
              await Promise.all([
                    authUpdate,
                    docUpdate
                  ]);
              return setDisabled(function (param) {
                          return false;
                        });
            }
            catch (raw_e){
              var e = Caml_js_exceptions.internalToOCamlException(raw_e);
              console.log(e);
              return ;
            }
          })(undefined));
  };
  React.useEffect((function () {
          if (signedIn) {
            if (user == null) {
              RescriptReactRouter.replace("/logout");
            } else {
              var email = user.email;
              var displayName = user.displayName;
              setDisplayName(function (param) {
                    return Belt_Option.getWithDefault(displayName, "");
                  });
              setEmail(function (param) {
                    return Belt_Option.getWithDefault(email, "");
                  });
            }
          } else {
            RescriptReactRouter.replace("/login");
          }
        }), []);
  if (signedIn) {
    return JsxRuntime.jsxs("div", {
                children: [
                  JsxRuntime.jsx("h1", {
                        children: "내 정보"
                      }),
                  JsxRuntime.jsx("form", {
                        children: JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsxs("label", {
                                      children: [
                                        JsxRuntime.jsx("label", {
                                              children: JsxRuntime.jsx("span", {
                                                    children: "필명",
                                                    className: "label-text"
                                                  }),
                                              className: "label"
                                            }),
                                        JsxRuntime.jsx("input", {
                                              className: "input input-bordered w-full",
                                              type: "text",
                                              value: displayName,
                                              onChange: handleDisplayNameChange
                                            })
                                      ],
                                      className: "block"
                                    }),
                                JsxRuntime.jsxs("label", {
                                      children: [
                                        JsxRuntime.jsx("label", {
                                              children: JsxRuntime.jsx("span", {
                                                    children: "이메일",
                                                    className: "label-text"
                                                  }),
                                              className: "label"
                                            }),
                                        JsxRuntime.jsx("input", {
                                              className: "input input-bordered input-disabled w-full",
                                              readOnly: true,
                                              type: "email",
                                              value: match$2[0]
                                            })
                                      ],
                                      className: "block"
                                    }),
                                JsxRuntime.jsx("input", {
                                      className: "btn btn-primary",
                                      disabled: match$3[0],
                                      type: "submit",
                                      value: "저장"
                                    })
                              ],
                              className: "grid grid-cols-1 gap-6"
                            }),
                        className: "mt-8 max-w-md",
                        onSubmit: handleSubmit
                      })
                ],
                className: "px-6 py-12 max-w-xl mx-auto md:max-w-4xl prose"
              });
  } else {
    return null;
  }
}

var make = Profile;

export {
  make ,
}
/* react Not a pure module */
