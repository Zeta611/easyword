// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_exn from "../node_modules/rescript/lib/es6/js_exn.js";
import * as Loader from "./Loader.js";
import * as Reactfire from "reactfire";
import * as Belt_Array from "../node_modules/rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "../node_modules/rescript/lib/es6/belt_Option.js";
import * as Caml_option from "../node_modules/rescript/lib/es6/caml_option.js";
import * as JsxRuntime from "react/jsx-runtime";
import * as Caml_js_exceptions from "../node_modules/rescript/lib/es6/caml_js_exceptions.js";
import * as Firestore from "firebase/firestore";
import * as RescriptReactRouter from "../node_modules/@rescript/react/src/RescriptReactRouter.js";

function makeRow(param, language) {
  var korean = param.korean;
  var english = param.english;
  var id = param.id;
  var match = language ? [
      korean,
      english
    ] : [
      english,
      korean
    ];
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("div", {
                      children: match[0],
                      className: "font-semibold group-hover:text-teal-700 dark:group-hover:text-teal-200 dark:text-white"
                    }),
                JsxRuntime.jsx("div", {
                      children: match[1],
                      className: "font-regular text-right text-zinc-500 group-hover:text-teal-600 dark:text-zinc-400 dark:group-hover:text-teal-300"
                    })
              ],
              className: "group cursor-pointer p-4 bg-white hover:bg-teal-50 rounded-xl shadow-md dark:bg-zinc-900 dark:hover:bg-teal-900",
              onClick: (function (param) {
                  RescriptReactRouter.push("/jargon/" + id + "");
                })
            }, id);
}

function JargonList(props) {
  var language = props.enKo ? /* English */0 : /* Korean */1;
  var direction = props.ascending ? /* Ascending */0 : /* Descending */1;
  var jargonsCollection = Firestore.collection(Reactfire.useFirestore(), "jargons");
  var language$1 = language ? "korean" : "english";
  var direction$1 = direction ? "desc" : "asc";
  var queryConstraint = Firestore.orderBy(language$1, direction$1);
  var jargonsQuery = Firestore.query(jargonsCollection, queryConstraint);
  var match = Reactfire.useFirestoreCollectionData(jargonsQuery, {
        idField: "id"
      });
  if (match.status !== "success") {
    return JsxRuntime.jsx("div", {
                children: JsxRuntime.jsx(Loader.make, {}),
                className: "h-screen grid justify-center content-center"
              });
  }
  var jargons = match.data;
  if (jargons === undefined) {
    return null;
  }
  var matchAll = /.*/;
  var regex;
  try {
    regex = new RegExp(props.query);
  }
  catch (raw_obj){
    var obj = Caml_js_exceptions.internalToOCamlException(raw_obj);
    if (obj.RE_EXN_ID === Js_exn.$$Error) {
      Belt_Option.forEach(obj._1.message, (function (prim) {
              console.log(prim);
            }));
      regex = matchAll;
    } else {
      throw obj;
    }
  }
  var rows = Belt_Array.keepMap(Caml_option.valFromOption(jargons), (function (jargon) {
          var match = jargon.english.match(regex);
          var match$1 = jargon.korean.match(regex);
          if (match !== null || match$1 !== null) {
            return Caml_option.some(makeRow(jargon, language));
          }
          
        }));
  return JsxRuntime.jsx("div", {
              children: rows,
              className: "grid sm:grid-cols-2 xl:grid-cols-3 gap-x-6 gap-y-2"
            });
}

var make = JargonList;

export {
  makeRow ,
  make ,
}
/* Loader Not a pure module */
