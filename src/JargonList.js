// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Array from "../node_modules/rescript/lib/es6/belt_Array.js";
import * as JargonCard from "./JargonCard.js";
import * as Belt_Option from "../node_modules/rescript/lib/es6/belt_Option.js";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptRelay_Query from "../node_modules/rescript-relay/src/RescriptRelay_Query.js";
import * as JargonListABCOrderQuery_graphql from "./__generated__/JargonListABCOrderQuery_graphql.js";
import * as JargonListChronoOrderQuery_graphql from "./__generated__/JargonListChronoOrderQuery_graphql.js";

var convertVariables = JargonListChronoOrderQuery_graphql.Internal.convertVariables;

var convertResponse = JargonListChronoOrderQuery_graphql.Internal.convertResponse;

var convertWrapRawResponse = JargonListChronoOrderQuery_graphql.Internal.convertWrapRawResponse;

var use = RescriptRelay_Query.useQuery(convertVariables, JargonListChronoOrderQuery_graphql.node, convertResponse);

var useLoader = RescriptRelay_Query.useLoader(convertVariables, JargonListChronoOrderQuery_graphql.node, (function (prim) {
        return prim;
      }));

var usePreloaded = RescriptRelay_Query.usePreloaded(JargonListChronoOrderQuery_graphql.node, convertResponse, (function (prim) {
        return prim;
      }));

var $$fetch = RescriptRelay_Query.$$fetch(JargonListChronoOrderQuery_graphql.node, convertResponse, convertVariables);

var fetchPromised = RescriptRelay_Query.fetchPromised(JargonListChronoOrderQuery_graphql.node, convertResponse, convertVariables);

var retain = RescriptRelay_Query.retain(JargonListChronoOrderQuery_graphql.node, convertVariables);

var JargonListChronoOrderQuery_order_by_decode = JargonListChronoOrderQuery_graphql.Utils.order_by_decode;

var JargonListChronoOrderQuery_order_by_fromString = JargonListChronoOrderQuery_graphql.Utils.order_by_fromString;

var JargonListChronoOrderQuery = {
  order_by_decode: JargonListChronoOrderQuery_order_by_decode,
  order_by_fromString: JargonListChronoOrderQuery_order_by_fromString,
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables,
  convertResponse: convertResponse,
  convertWrapRawResponse: convertWrapRawResponse,
  use: use,
  useLoader: useLoader,
  usePreloaded: usePreloaded,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  retain: retain
};

var convertVariables$1 = JargonListABCOrderQuery_graphql.Internal.convertVariables;

var convertResponse$1 = JargonListABCOrderQuery_graphql.Internal.convertResponse;

var convertWrapRawResponse$1 = JargonListABCOrderQuery_graphql.Internal.convertWrapRawResponse;

var use$1 = RescriptRelay_Query.useQuery(convertVariables$1, JargonListABCOrderQuery_graphql.node, convertResponse$1);

var useLoader$1 = RescriptRelay_Query.useLoader(convertVariables$1, JargonListABCOrderQuery_graphql.node, (function (prim) {
        return prim;
      }));

var usePreloaded$1 = RescriptRelay_Query.usePreloaded(JargonListABCOrderQuery_graphql.node, convertResponse$1, (function (prim) {
        return prim;
      }));

var $$fetch$1 = RescriptRelay_Query.$$fetch(JargonListABCOrderQuery_graphql.node, convertResponse$1, convertVariables$1);

var fetchPromised$1 = RescriptRelay_Query.fetchPromised(JargonListABCOrderQuery_graphql.node, convertResponse$1, convertVariables$1);

var retain$1 = RescriptRelay_Query.retain(JargonListABCOrderQuery_graphql.node, convertVariables$1);

var JargonListABCOrderQuery_order_by_decode = JargonListABCOrderQuery_graphql.Utils.order_by_decode;

var JargonListABCOrderQuery_order_by_fromString = JargonListABCOrderQuery_graphql.Utils.order_by_fromString;

var JargonListABCOrderQuery = {
  order_by_decode: JargonListABCOrderQuery_order_by_decode,
  order_by_fromString: JargonListABCOrderQuery_order_by_fromString,
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables$1,
  convertResponse: convertResponse$1,
  convertWrapRawResponse: convertWrapRawResponse$1,
  use: use$1,
  useLoader: useLoader$1,
  usePreloaded: usePreloaded$1,
  $$fetch: $$fetch$1,
  fetchPromised: fetchPromised$1,
  retain: retain$1
};

function JargonList(props) {
  var direction = props.direction;
  var rows;
  if (props.axis === "English") {
    var match = use$1({
          direction: direction
        }, undefined, undefined, undefined);
    rows = Belt_Array.map(Belt_Array.map(match.jargon_connection.edges, (function (param) {
                var jargon = param.node;
                return {
                        id: jargon.id,
                        name: jargon.name,
                        updated_at: new Date(jargon.updated_at),
                        translations: Belt_Array.map(jargon.translations, (function (translation) {
                                return [
                                        translation.id,
                                        translation.name
                                      ];
                              })),
                        commentsCount: Belt_Option.getWithDefault(Belt_Option.flatMap(jargon.comments_aggregate.aggregate, (function (x) {
                                    return x.count;
                                  })), 0)
                      };
              })), (function (jargon) {
            return JsxRuntime.jsx(JargonCard.make, {
                        jargon: jargon
                      }, jargon.id);
          }));
  } else {
    var match$1 = use({
          direction: direction
        }, undefined, undefined, undefined);
    rows = Belt_Array.map(Belt_Array.map(match$1.jargon_connection.edges, (function (param) {
                var jargon = param.node;
                return {
                        id: jargon.id,
                        name: jargon.name,
                        updated_at: new Date(jargon.updated_at),
                        translations: Belt_Array.map(jargon.translations, (function (translation) {
                                return [
                                        translation.id,
                                        translation.name
                                      ];
                              })),
                        commentsCount: Belt_Option.getWithDefault(Belt_Option.flatMap(jargon.comments_aggregate.aggregate, (function (x) {
                                    return x.count;
                                  })), 0)
                      };
              })), (function (jargon) {
            return JsxRuntime.jsx(JargonCard.make, {
                        jargon: jargon
                      }, jargon.id);
          }));
  }
  return JsxRuntime.jsx("div", {
              children: rows,
              className: "grid sm:grid-cols-2 md:grid-cols-3 xl:grid-cols-4 gap-x-6 gap-y-2"
            });
}

var make = JargonList;

export {
  JargonListChronoOrderQuery ,
  JargonListABCOrderQuery ,
  make ,
}
/* use Not a pure module */
