// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Loader from "./Loader.js";
import * as JargonCard from "./JargonCard.js";
import * as Caml_option from "../node_modules/rescript/lib/es6/caml_option.js";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptRelay_Fragment from "../node_modules/rescript-relay/src/RescriptRelay_Fragment.js";
import ReactInfiniteScrollComponent from "react-infinite-scroll-component";
import * as JargonListChronoOrderQuery_graphql from "./__generated__/JargonListChronoOrderQuery_graphql.js";
import * as JargonListChronoOrderRefetchQuery_graphql from "./__generated__/JargonListChronoOrderRefetchQuery_graphql.js";

var getConnectionNodes = JargonListChronoOrderQuery_graphql.Utils.getConnectionNodes;

var convertFragment = JargonListChronoOrderQuery_graphql.Internal.convertFragment;

function use(fRef) {
  return RescriptRelay_Fragment.useFragment(JargonListChronoOrderQuery_graphql.node, convertFragment, fRef);
}

function useOpt(fRef) {
  return RescriptRelay_Fragment.useFragmentOpt(fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(fRef)) : undefined, JargonListChronoOrderQuery_graphql.node, convertFragment);
}

var makeRefetchVariables = JargonListChronoOrderRefetchQuery_graphql.Types.makeRefetchVariables;

var convertRefetchVariables = JargonListChronoOrderRefetchQuery_graphql.Internal.convertVariables;

function useRefetchable(fRef) {
  return RescriptRelay_Fragment.useRefetchableFragment(JargonListChronoOrderQuery_graphql.node, convertFragment, convertRefetchVariables, fRef);
}

function usePagination(fRef) {
  return RescriptRelay_Fragment.usePaginationFragment(JargonListChronoOrderQuery_graphql.node, fRef, convertFragment, convertRefetchVariables);
}

function useBlockingPagination(fRef) {
  return RescriptRelay_Fragment.useBlockingPaginationFragment(JargonListChronoOrderQuery_graphql.node, fRef, convertFragment, convertRefetchVariables);
}

var JargonListChronoOrderQuery = {
  getConnectionNodes: getConnectionNodes,
  Types: undefined,
  Operation: undefined,
  convertFragment: convertFragment,
  use: use,
  useOpt: useOpt,
  makeRefetchVariables: makeRefetchVariables,
  convertRefetchVariables: convertRefetchVariables,
  useRefetchable: useRefetchable,
  usePagination: usePagination,
  useBlockingPagination: useBlockingPagination
};

function handleScroll($$event, onLoadMore) {
  var currentTarget = $$event.currentTarget;
  console.log(currentTarget.scrollTop, currentTarget.clientHeight, currentTarget.scrollHeight);
  if ((currentTarget.scrollTop + currentTarget.clientHeight | 0) >= currentTarget.scrollHeight) {
    return onLoadMore();
  }
  
}

function JargonList(props) {
  var query = props.query;
  var match;
  if (props.axis === "English") {
    var match$1 = usePagination(query);
    match = [
      getConnectionNodes(match$1.data.jargon_connection).map(function (node) {
            return [
                    node.id,
                    node.fragmentRefs
                  ];
          }),
      match$1.hasNext,
      match$1.loadNext
    ];
  } else {
    var match$2 = usePagination(query);
    match = [
      getConnectionNodes(match$2.data.jargon_connection).map(function (node) {
            return [
                    node.id,
                    node.fragmentRefs
                  ];
          }),
      match$2.hasNext,
      match$2.loadNext
    ];
  }
  var loadNext = match[2];
  var rows = match[0];
  return JsxRuntime.jsx(ReactInfiniteScrollComponent, {
              className: "grid sm:grid-cols-2 md:grid-cols-3 xl:grid-cols-4 gap-x-6 gap-y-2",
              dataLength: rows.length,
              next: (function () {
                  loadNext(40, undefined);
                }),
              hasMore: match[1],
              loader: JsxRuntime.jsx("div", {
                    children: JsxRuntime.jsx(Loader.make, {}),
                    className: "grid justify-center content-center"
                  }),
              children: rows.map(function (param) {
                    return JsxRuntime.jsx("li", {
                                children: JsxRuntime.jsx(JargonCard.make, {
                                      jargonCardRef: param[1]
                                    }),
                                className: "flex flex-col gap-y-2 group cursor-pointer bg-white hover:bg-teal-50 rounded-xl shadow-md dark:bg-zinc-900 dark:hover:bg-teal-900"
                              }, param[0]);
                  })
            });
}

var make = JargonList;

export {
  JargonListChronoOrderQuery ,
  handleScroll ,
  make ,
}
/* Loader Not a pure module */
