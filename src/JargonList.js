// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "../node_modules/rescript/lib/es6/curry.js";
import * as Loader from "./Loader.js";
import * as Js_array from "../node_modules/rescript/lib/es6/js_array.js";
import * as Belt_Array from "../node_modules/rescript/lib/es6/belt_Array.js";
import * as JargonCard from "./JargonCard.js";
import * as Belt_Option from "../node_modules/rescript/lib/es6/belt_Option.js";
import * as Client from "@apollo/client";
import * as JsxRuntime from "react/jsx-runtime";
import * as ApolloClient__React_Hooks_UseQuery from "../node_modules/rescript-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.js";

var Raw = {};

var query = Client.gql(["query ChronoOrder($direction: order_by!) @cached {\njargon(order_by: [{updated_at: $direction}, {name: asc}])  {\n__typename  \nid  \nname  \nupdated_at  \ntranslations(order_by: [{name: asc}], limit: 20)  {\n__typename  \nid  \nname  \n}\n\ncomments_aggregate  {\n__typename  \naggregate  {\n__typename  \ncount  \n}\n\n}\n\n}\n\n}\n"]);

function parse(value) {
  var value$1 = value.jargon;
  return {
          jargon: Js_array.map((function (value) {
                  var value$1 = value.translations;
                  var value$2 = value.comments_aggregate;
                  var value$3 = value$2.aggregate;
                  return {
                          __typename: value.__typename,
                          id: value.id,
                          name: value.name,
                          updated_at: value.updated_at,
                          translations: Js_array.map((function (value) {
                                  return {
                                          __typename: value.__typename,
                                          id: value.id,
                                          name: value.name
                                        };
                                }), value$1),
                          comments_aggregate: {
                            __typename: value$2.__typename,
                            aggregate: !(value$3 == null) ? ({
                                  __typename: value$3.__typename,
                                  count: value$3.count
                                }) : undefined
                          }
                        };
                }), value$1)
        };
}

function serialize(value) {
  var value$1 = value.jargon;
  var jargon = Js_array.map((function (value) {
          var value$1 = value.comments_aggregate;
          var value$2 = value$1.aggregate;
          var aggregate;
          if (value$2 !== undefined) {
            var value$3 = value$2.count;
            var value$4 = value$2.__typename;
            aggregate = {
              __typename: value$4,
              count: value$3
            };
          } else {
            aggregate = null;
          }
          var value$5 = value$1.__typename;
          var comments_aggregate = {
            __typename: value$5,
            aggregate: aggregate
          };
          var value$6 = value.translations;
          var translations = Js_array.map((function (value) {
                  var value$1 = value.name;
                  var value$2 = value.id;
                  var value$3 = value.__typename;
                  return {
                          __typename: value$3,
                          id: value$2,
                          name: value$1
                        };
                }), value$6);
          var value$7 = value.updated_at;
          var value$8 = value.name;
          var value$9 = value.id;
          var value$10 = value.__typename;
          return {
                  __typename: value$10,
                  id: value$9,
                  name: value$8,
                  updated_at: value$7,
                  translations: translations,
                  comments_aggregate: comments_aggregate
                };
        }), value$1);
  return {
          jargon: jargon
        };
}

function serializeVariables(inp) {
  var a = inp.direction;
  return {
          direction: a === "desc" ? "desc" : (
              a === "asc_nulls_first" ? "asc_nulls_first" : (
                  a === "desc_nulls_first" ? "desc_nulls_first" : (
                      a === "asc" ? "asc" : (
                          a === "asc_nulls_last" ? "asc_nulls_last" : "desc_nulls_last"
                        )
                    )
                )
            )
        };
}

function makeVariables(direction, param) {
  return {
          direction: direction
        };
}

var ChronoOrder_inner = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables
};

var include = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query,
      Raw: Raw,
      parse: parse,
      serialize: serialize,
      serializeVariables: serializeVariables
    });

var use = include.use;

var ChronoOrder_refetchQueryDescription = include.refetchQueryDescription;

var ChronoOrder_useLazy = include.useLazy;

var ChronoOrder_useLazyWithVariables = include.useLazyWithVariables;

var ChronoOrder = {
  ChronoOrder_inner: ChronoOrder_inner,
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  refetchQueryDescription: ChronoOrder_refetchQueryDescription,
  use: use,
  useLazy: ChronoOrder_useLazy,
  useLazyWithVariables: ChronoOrder_useLazyWithVariables
};

var Raw$1 = {};

var query$1 = Client.gql(["query ABCOrder($direction: order_by!) @cached {\njargon(order_by: [{name: $direction}, {updated_at: desc}])  {\n__typename  \nid  \nname  \nupdated_at  \ntranslations(order_by: [{name: asc}], limit: 20)  {\n__typename  \nid  \nname  \n}\n\ncomments_aggregate  {\n__typename  \naggregate  {\n__typename  \ncount  \n}\n\n}\n\n}\n\n}\n"]);

function parse$1(value) {
  var value$1 = value.jargon;
  return {
          jargon: Js_array.map((function (value) {
                  var value$1 = value.translations;
                  var value$2 = value.comments_aggregate;
                  var value$3 = value$2.aggregate;
                  return {
                          __typename: value.__typename,
                          id: value.id,
                          name: value.name,
                          updated_at: value.updated_at,
                          translations: Js_array.map((function (value) {
                                  return {
                                          __typename: value.__typename,
                                          id: value.id,
                                          name: value.name
                                        };
                                }), value$1),
                          comments_aggregate: {
                            __typename: value$2.__typename,
                            aggregate: !(value$3 == null) ? ({
                                  __typename: value$3.__typename,
                                  count: value$3.count
                                }) : undefined
                          }
                        };
                }), value$1)
        };
}

function serialize$1(value) {
  var value$1 = value.jargon;
  var jargon = Js_array.map((function (value) {
          var value$1 = value.comments_aggregate;
          var value$2 = value$1.aggregate;
          var aggregate;
          if (value$2 !== undefined) {
            var value$3 = value$2.count;
            var value$4 = value$2.__typename;
            aggregate = {
              __typename: value$4,
              count: value$3
            };
          } else {
            aggregate = null;
          }
          var value$5 = value$1.__typename;
          var comments_aggregate = {
            __typename: value$5,
            aggregate: aggregate
          };
          var value$6 = value.translations;
          var translations = Js_array.map((function (value) {
                  var value$1 = value.name;
                  var value$2 = value.id;
                  var value$3 = value.__typename;
                  return {
                          __typename: value$3,
                          id: value$2,
                          name: value$1
                        };
                }), value$6);
          var value$7 = value.updated_at;
          var value$8 = value.name;
          var value$9 = value.id;
          var value$10 = value.__typename;
          return {
                  __typename: value$10,
                  id: value$9,
                  name: value$8,
                  updated_at: value$7,
                  translations: translations,
                  comments_aggregate: comments_aggregate
                };
        }), value$1);
  return {
          jargon: jargon
        };
}

function serializeVariables$1(inp) {
  var a = inp.direction;
  return {
          direction: a === "desc" ? "desc" : (
              a === "asc_nulls_first" ? "asc_nulls_first" : (
                  a === "desc_nulls_first" ? "desc_nulls_first" : (
                      a === "asc" ? "asc" : (
                          a === "asc_nulls_last" ? "asc_nulls_last" : "desc_nulls_last"
                        )
                    )
                )
            )
        };
}

function makeVariables$1(direction, param) {
  return {
          direction: direction
        };
}

var ABCOrder_inner = {
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1
};

var include$1 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$1,
      Raw: Raw$1,
      parse: parse$1,
      serialize: serialize$1,
      serializeVariables: serializeVariables$1
    });

var use$1 = include$1.use;

var ABCOrder_refetchQueryDescription = include$1.refetchQueryDescription;

var ABCOrder_useLazy = include$1.useLazy;

var ABCOrder_useLazyWithVariables = include$1.useLazyWithVariables;

var ABCOrder = {
  ABCOrder_inner: ABCOrder_inner,
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1,
  refetchQueryDescription: ABCOrder_refetchQueryDescription,
  use: use$1,
  useLazy: ABCOrder_useLazy,
  useLazyWithVariables: ABCOrder_useLazyWithVariables
};

var JargonListQuery = {
  ChronoOrder: ChronoOrder,
  ABCOrder: ABCOrder
};

function JargonList(props) {
  var direction = props.direction;
  if (props.axis) {
    var jargonListResult = Curry.app(use, [
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          {
            direction: direction
          }
        ]);
    var match = jargonListResult.data;
    if (match === undefined) {
      if (jargonListResult.loading) {
        return JsxRuntime.jsx("div", {
                    children: JsxRuntime.jsx(Loader.make, {}),
                    className: "h-screen grid justify-center content-center"
                  });
      } else {
        return null;
      }
    }
    var rows = Belt_Array.map(Belt_Array.map(match.jargon, (function (jargon) {
                return {
                        id: jargon.id,
                        name: jargon.name,
                        updated_at: new Date(String(jargon.updated_at)),
                        translations: Belt_Array.map(jargon.translations, (function (translation) {
                                return [
                                        translation.id,
                                        translation.name
                                      ];
                              })),
                        commentsCount: Belt_Option.getWithDefault(Belt_Option.flatMap(jargon.comments_aggregate.aggregate, (function (x) {
                                    return x.count;
                                  })), 0)
                      };
              })), (function (jargon) {
            return JsxRuntime.jsx(JargonCard.make, {
                        jargon: jargon
                      }, String(jargon.id));
          }));
    return JsxRuntime.jsx("div", {
                children: rows,
                className: "grid sm:grid-cols-2 md:grid-cols-3 xl:grid-cols-4 gap-x-6 gap-y-2"
              });
  }
  var jargonListResult$1 = Curry.app(use$1, [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        {
          direction: direction
        }
      ]);
  var match$1 = jargonListResult$1.data;
  if (match$1 === undefined) {
    if (jargonListResult$1.loading) {
      return JsxRuntime.jsx("div", {
                  children: JsxRuntime.jsx(Loader.make, {}),
                  className: "h-screen grid justify-center content-center"
                });
    } else {
      return null;
    }
  }
  var rows$1 = Belt_Array.map(Belt_Array.map(match$1.jargon, (function (jargon) {
              return {
                      id: jargon.id,
                      name: jargon.name,
                      updated_at: new Date(String(jargon.updated_at)),
                      translations: Belt_Array.map(jargon.translations, (function (translation) {
                              return [
                                      translation.id,
                                      translation.name
                                    ];
                            })),
                      commentsCount: Belt_Option.getWithDefault(Belt_Option.flatMap(jargon.comments_aggregate.aggregate, (function (x) {
                                  return x.count;
                                })), 0)
                    };
            })), (function (jargon) {
          return JsxRuntime.jsx(JargonCard.make, {
                      jargon: jargon
                    }, String(jargon.id));
        }));
  return JsxRuntime.jsx("div", {
              children: rows$1,
              className: "grid sm:grid-cols-2 md:grid-cols-3 xl:grid-cols-4 gap-x-6 gap-y-2"
            });
}

var make = JargonList;

export {
  JargonListQuery ,
  make ,
}
/* query Not a pure module */
