// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_array from "../node_modules/rescript/lib/es6/js_array.js";
import * as Client from "@apollo/client";
import * as ApolloClient__React_Hooks_UseQuery from "../node_modules/rescript-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.js";

var Raw = {};

var query = Client.gql(["query ChronoOrder($direction: order_by!) @cached {\njargon(order_by: [{updated_at: $direction}, {name: asc}], limit: 40)  {\n__typename  \nid  \nname  \nupdated_at  \ntranslations(order_by: [{name: asc}], limit: 20)  {\n__typename  \nid  \nname  \n}\n\n}\n\n}\n"]);

function parse(value) {
  var value$1 = value.jargon;
  return {
          jargon: Js_array.map((function (value) {
                  var value$1 = value.translations;
                  return {
                          __typename: value.__typename,
                          id: value.id,
                          name: value.name,
                          updated_at: value.updated_at,
                          translations: Js_array.map((function (value) {
                                  return {
                                          __typename: value.__typename,
                                          id: value.id,
                                          name: value.name
                                        };
                                }), value$1)
                        };
                }), value$1)
        };
}

function serialize(value) {
  var value$1 = value.jargon;
  var jargon = Js_array.map((function (value) {
          var value$1 = value.translations;
          var translations = Js_array.map((function (value) {
                  var value$1 = value.name;
                  var value$2 = value.id;
                  var value$3 = value.__typename;
                  return {
                          __typename: value$3,
                          id: value$2,
                          name: value$1
                        };
                }), value$1);
          var value$2 = value.updated_at;
          var value$3 = value.name;
          var value$4 = value.id;
          var value$5 = value.__typename;
          return {
                  __typename: value$5,
                  id: value$4,
                  name: value$3,
                  updated_at: value$2,
                  translations: translations
                };
        }), value$1);
  return {
          jargon: jargon
        };
}

function serializeVariables(inp) {
  var a = inp.direction;
  return {
          direction: a === "desc" ? "desc" : (
              a === "asc_nulls_first" ? "asc_nulls_first" : (
                  a === "desc_nulls_first" ? "desc_nulls_first" : (
                      a === "asc" ? "asc" : (
                          a === "asc_nulls_last" ? "asc_nulls_last" : "desc_nulls_last"
                        )
                    )
                )
            )
        };
}

function makeVariables(direction, param) {
  return {
          direction: direction
        };
}

var ChronoOrder_inner = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables
};

var include = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query,
      Raw: Raw,
      parse: parse,
      serialize: serialize,
      serializeVariables: serializeVariables
    });

var ChronoOrder_refetchQueryDescription = include.refetchQueryDescription;

var ChronoOrder_use = include.use;

var ChronoOrder_useLazy = include.useLazy;

var ChronoOrder_useLazyWithVariables = include.useLazyWithVariables;

var ChronoOrder = {
  ChronoOrder_inner: ChronoOrder_inner,
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  refetchQueryDescription: ChronoOrder_refetchQueryDescription,
  use: ChronoOrder_use,
  useLazy: ChronoOrder_useLazy,
  useLazyWithVariables: ChronoOrder_useLazyWithVariables
};

var Raw$1 = {};

var query$1 = Client.gql(["query ABCOrder($direction: order_by!) @cached {\njargon(order_by: [{name: $direction}, {updated_at: desc}], limit: 40)  {\n__typename  \nid  \nname  \nupdated_at  \ntranslations(order_by: [{name: asc}], limit: 20)  {\n__typename  \nid  \nname  \n}\n\n}\n\n}\n"]);

function parse$1(value) {
  var value$1 = value.jargon;
  return {
          jargon: Js_array.map((function (value) {
                  var value$1 = value.translations;
                  return {
                          __typename: value.__typename,
                          id: value.id,
                          name: value.name,
                          updated_at: value.updated_at,
                          translations: Js_array.map((function (value) {
                                  return {
                                          __typename: value.__typename,
                                          id: value.id,
                                          name: value.name
                                        };
                                }), value$1)
                        };
                }), value$1)
        };
}

function serialize$1(value) {
  var value$1 = value.jargon;
  var jargon = Js_array.map((function (value) {
          var value$1 = value.translations;
          var translations = Js_array.map((function (value) {
                  var value$1 = value.name;
                  var value$2 = value.id;
                  var value$3 = value.__typename;
                  return {
                          __typename: value$3,
                          id: value$2,
                          name: value$1
                        };
                }), value$1);
          var value$2 = value.updated_at;
          var value$3 = value.name;
          var value$4 = value.id;
          var value$5 = value.__typename;
          return {
                  __typename: value$5,
                  id: value$4,
                  name: value$3,
                  updated_at: value$2,
                  translations: translations
                };
        }), value$1);
  return {
          jargon: jargon
        };
}

function serializeVariables$1(inp) {
  var a = inp.direction;
  return {
          direction: a === "desc" ? "desc" : (
              a === "asc_nulls_first" ? "asc_nulls_first" : (
                  a === "desc_nulls_first" ? "desc_nulls_first" : (
                      a === "asc" ? "asc" : (
                          a === "asc_nulls_last" ? "asc_nulls_last" : "desc_nulls_last"
                        )
                    )
                )
            )
        };
}

function makeVariables$1(direction, param) {
  return {
          direction: direction
        };
}

var ABCOrder_inner = {
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1
};

var include$1 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$1,
      Raw: Raw$1,
      parse: parse$1,
      serialize: serialize$1,
      serializeVariables: serializeVariables$1
    });

var ABCOrder_refetchQueryDescription = include$1.refetchQueryDescription;

var ABCOrder_use = include$1.use;

var ABCOrder_useLazy = include$1.useLazy;

var ABCOrder_useLazyWithVariables = include$1.useLazyWithVariables;

var ABCOrder = {
  ABCOrder_inner: ABCOrder_inner,
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1,
  refetchQueryDescription: ABCOrder_refetchQueryDescription,
  use: ABCOrder_use,
  useLazy: ABCOrder_useLazy,
  useLazyWithVariables: ABCOrder_useLazyWithVariables
};

var JargonListQuery = {
  ChronoOrder: ChronoOrder,
  ABCOrder: ABCOrder
};

function JargonList(props) {
  return null;
}

var make = JargonList;

export {
  JargonListQuery ,
  make ,
}
/* query Not a pure module */
