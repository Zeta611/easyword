// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_List from "../node_modules/rescript/lib/es6/belt_List.js";
import * as Belt_Array from "../node_modules/rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "../node_modules/rescript/lib/es6/belt_Option.js";
import * as Belt_HashMapString from "../node_modules/rescript/lib/es6/belt_HashMapString.js";

function constructForest(comments) {
  var roots = {
    contents: /* [] */0
  };
  var commentNodeTable = Belt_HashMapString.make(10);
  Belt_Array.forEach(comments, (function (comment) {
          var node = {
            comment: comment,
            parent: undefined,
            children: /* [] */0
          };
          Belt_HashMapString.set(commentNodeTable, comment.id, node);
          if (Belt_Option.isNone(comment.parent)) {
            roots.contents = Belt_List.add(roots.contents, node);
            return ;
          }
          
        }));
  Belt_HashMapString.forEach(commentNodeTable, (function (param, node) {
          var parent = node.comment.parent;
          if (parent === undefined) {
            return ;
          }
          var parentNode = Belt_Option.getExn(Belt_HashMapString.get(commentNodeTable, parent));
          parentNode.children = Belt_List.add(parentNode.children, node);
          node.parent = parentNode;
        }));
  return roots;
}

function countDescendents(children) {
  if (!children) {
    return 0;
  }
  var children$1 = children.hd.children;
  return (1 + countDescendents(children$1) | 0) + countDescendents(children.tl) | 0;
}

export {
  constructForest ,
  countDescendents ,
}
/* No side effect */
