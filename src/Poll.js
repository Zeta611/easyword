// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Reactfire from "reactfire";
import * as Belt_Array from "../node_modules/rescript/lib/es6/belt_Array.js";
import * as Caml_option from "../node_modules/rescript/lib/es6/caml_option.js";
import * as JsxRuntime from "react/jsx-runtime";
import * as Firestore from "firebase/firestore";

function getVotesRatio(votes, allVotes) {
  return votes / allVotes;
}

function makeRows(translations) {
  var allVotes = Belt_Array.reduceU(translations, 0, (function (cnt, x) {
          return x.votes + cnt | 0;
        }));
  return Belt_Array.mapU(translations, (function (x) {
                return JsxRuntime.jsxs("tr", {
                            children: [
                              JsxRuntime.jsx("th", {
                                    children: JsxRuntime.jsx("label", {
                                          children: JsxRuntime.jsx("input", {
                                                className: "radio radio-primary",
                                                name: "radio",
                                                type: "radio"
                                              })
                                        }),
                                    className: "w-10"
                                  }),
                              JsxRuntime.jsxs("td", {
                                    children: [
                                      x.korean,
                                      JsxRuntime.jsx("br", {}),
                                      JsxRuntime.jsx("progress", {
                                            className: "progress progress-primary w-full",
                                            max: "1",
                                            value: String(x.votes / allVotes)
                                          })
                                    ]
                                  }),
                              JsxRuntime.jsx("th", {
                                    children: String(x.votes) + "í‘œ",
                                    className: "w-10"
                                  })
                            ],
                            className: "active"
                          }, x.id);
              }));
}

function Poll(props) {
  var firestore = Reactfire.useFirestore();
  var translationsCollection = Firestore.collection(firestore, "jargons/" + props.id + "/translations");
  var match = Reactfire.useFirestoreCollectionData(Firestore.query(translationsCollection, Firestore.orderBy("votes", "desc")), {
        idField: "id"
      });
  var translations = match.data;
  if (match.status === "success" && translations !== undefined) {
    return JsxRuntime.jsx("div", {
                children: JsxRuntime.jsx("table", {
                      children: JsxRuntime.jsx("tbody", {
                            children: makeRows(Caml_option.valFromOption(translations))
                          }),
                      className: "table w-full"
                    }),
                className: "overflow-x-auto"
              });
  } else {
    return null;
  }
}

var make = Poll;

export {
  getVotesRatio ,
  makeRows ,
  make ,
}
/* reactfire Not a pure module */
