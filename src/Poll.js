// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "../node_modules/rescript/lib/es6/curry.js";
import * as React from "react";
import * as Js_dict from "../node_modules/rescript/lib/es6/js_dict.js";
import * as Reactfire from "reactfire";
import * as Belt_Array from "../node_modules/rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "../node_modules/rescript/lib/es6/belt_Option.js";
import * as Caml_option from "../node_modules/rescript/lib/es6/caml_option.js";
import * as SignInContext from "./SignInContext.js";
import * as Belt_MapString from "../node_modules/rescript/lib/es6/belt_MapString.js";
import * as Belt_SetString from "../node_modules/rescript/lib/es6/belt_SetString.js";
import * as JsxRuntime from "react/jsx-runtime";
import * as Firestore from "firebase/firestore";
import * as Functions from "firebase/functions";

function getVotesRatio(votes, allVotes) {
  return votes / (
          allVotes > 0 ? allVotes : 0
        );
}

function Poll$PollRow(props) {
  var setVotesCount = props.setVotesCount;
  var isChecked = props.isChecked;
  var checkedItemHandler = props.checkedItemHandler;
  var translation = props.translation;
  var match = React.useState(function () {
        return false;
      });
  var setChecked = match[1];
  var checked = match[0];
  React.useEffect(function () {
        setChecked(function (param) {
              return isChecked;
            });
      });
  var match$1 = React.useContext(SignInContext.context);
  var user = match$1.user;
  var signedIn = match$1.signedIn;
  var firestore = Reactfire.useFirestore();
  var votesCollection = Firestore.collection(firestore, "jargons/" + props.jargonID + "/translations/" + translation.id + "/votes");
  var match$2 = Reactfire.useFirestoreCollectionData(Firestore.query(votesCollection), {
        idField: "id"
      });
  var votes = match$2.data;
  React.useEffect((function () {
          if (votes !== undefined) {
            var votes$1 = Caml_option.valFromOption(votes);
            setVotesCount(function (votesCount) {
                  return Belt_MapString.update(votesCount, translation.id, (function (param) {
                                return votes$1.length;
                              }));
                });
            if (signedIn && !(user == null)) {
              var uid = user.uid;
              if (Belt_Option.isSome(Caml_option.undefined_to_opt(votes$1.find(function (x) {
                              return x.id === uid;
                            })))) {
                Curry._2(checkedItemHandler, translation.id, true);
              }
              
            }
            
          }
          
        }), [votes]);
  if (match$2.status !== "success") {
    return null;
  }
  if (votes === undefined) {
    return null;
  }
  var votes$1 = Belt_MapString.getWithDefault(props.votesCount, translation.id, Caml_option.valFromOption(votes).length);
  return JsxRuntime.jsxs("tr", {
              children: [
                JsxRuntime.jsx("th", {
                      children: JsxRuntime.jsx("label", {
                            children: JsxRuntime.jsx("input", {
                                  className: "checkbox checkbox-primary",
                                  checked: checked,
                                  type: "checkbox",
                                  onChange: (function (param) {
                                      setChecked(function (param) {
                                            return !checked;
                                          });
                                      Curry._2(checkedItemHandler, translation.id, !checked);
                                    })
                                })
                          }),
                      className: "w-10"
                    }),
                JsxRuntime.jsxs("td", {
                      children: [
                        JsxRuntime.jsx("a", {
                              children: translation.korean,
                              href: "#" + translation.associated_comment + ""
                            }),
                        JsxRuntime.jsx("br", {}),
                        JsxRuntime.jsx("progress", {
                              className: "progress progress-primary w-full",
                              max: "1",
                              value: String(getVotesRatio(votes$1, props.allVotes))
                            })
                      ]
                    }),
                JsxRuntime.jsx("th", {
                      children: "" + String(votes$1) + "표",
                      className: "w-10"
                    })
              ],
              className: "active"
            });
}

var PollRow = {
  make: Poll$PollRow
};

function Poll(props) {
  var jargonID = props.jargonID;
  var firestore = Reactfire.useFirestore();
  var translationsCollection = Firestore.collection(firestore, "jargons/" + jargonID + "/translations");
  var match = Reactfire.useFirestoreCollectionData(Firestore.query(translationsCollection, Firestore.orderBy("korean", "asc")), {
        idField: "id"
      });
  var translations = match.data;
  var match$1 = React.useState(function () {
        
      });
  var setCheckedItems = match$1[1];
  var checkedItems = match$1[0];
  var checkedItemHandler = function (id, isChecked) {
    if (isChecked) {
      return setCheckedItems(function (param) {
                  return Belt_SetString.add(checkedItems, id);
                });
    } else if (Belt_SetString.has(checkedItems, id)) {
      return setCheckedItems(function (param) {
                  return Belt_SetString.remove(checkedItems, id);
                });
    } else {
      return ;
    }
  };
  var match$2 = React.useState(function () {
        
      });
  var setVotesCount = match$2[1];
  var votesCount = match$2[0];
  var match$3 = React.useState(function () {
        return false;
      });
  var setIsLoading = match$3[1];
  var match$4 = React.useContext(SignInContext.context);
  var user = match$4.user;
  var signedIn = match$4.signedIn;
  var functions = Functions.getFunctions(Reactfire.useFirebaseApp(), "asia-northeast3");
  if (match.status === "success" && translations !== undefined) {
    return JsxRuntime.jsxs("div", {
                children: [
                  JsxRuntime.jsx("table", {
                        children: JsxRuntime.jsx("tbody", {
                              children: Belt_Array.map(Caml_option.valFromOption(translations), (function (translation) {
                                      return JsxRuntime.jsx(Poll$PollRow, {
                                                  jargonID: jargonID,
                                                  translation: translation,
                                                  allVotes: Belt_MapString.reduce(votesCount, 0, (function (prev, param, votes) {
                                                          return prev + votes | 0;
                                                        })),
                                                  checkedItemHandler: checkedItemHandler,
                                                  isChecked: Belt_SetString.has(checkedItems, translation.id),
                                                  votesCount: votesCount,
                                                  setVotesCount: setVotesCount
                                                }, translation.id);
                                    }))
                            }),
                        className: "table w-full"
                      }),
                  JsxRuntime.jsx("button", {
                        children: "투표하기",
                        className: "btn btn-primary w-full " + (
                          match$3[0] ? "loading" : ""
                        ) + "",
                        onClick: (function (param) {
                            if (signedIn && !(user == null)) {
                              setIsLoading(function (param) {
                                    return true;
                                  });
                              ((async function (param) {
                                      var vote = Functions.httpsCallable(functions, "vote");
                                      var result = await vote({
                                            jargonID: jargonID,
                                            translations: Belt_SetString.toArray(checkedItems)
                                          });
                                      Belt_Array.forEach(Js_dict.entries(result.data), (function (param) {
                                              var diff = param[1];
                                              var translationID = param[0];
                                              setVotesCount(function (votesCount) {
                                                    return Belt_MapString.update(votesCount, translationID, (function (cnt) {
                                                                  if (cnt !== undefined) {
                                                                    return cnt + diff | 0;
                                                                  } else {
                                                                    return diff;
                                                                  }
                                                                }));
                                                  });
                                            }));
                                      return setIsLoading(function (param) {
                                                  return false;
                                                });
                                    })(undefined));
                            } else {
                              window.alert("You need to be signed in to vote!");
                            }
                          })
                      })
                ],
                className: "overflow-x-auto"
              });
  } else {
    return null;
  }
}

var make = Poll;

export {
  getVotesRatio ,
  PollRow ,
  make ,
}
/* react Not a pure module */
