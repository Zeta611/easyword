// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_option from "../node_modules/rescript/lib/es6/caml_option.js";
import * as Core__Option from "../node_modules/@rescript/core/src/Core__Option.js";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptRelay_Fragment from "../node_modules/rescript-relay/src/RescriptRelay_Fragment.js";
import * as Translation_jargon_graphql from "./__generated__/Translation_jargon_graphql.js";

var convertFragment = Translation_jargon_graphql.Internal.convertFragment;

function use(fRef) {
  return RescriptRelay_Fragment.useFragment(Translation_jargon_graphql.node, convertFragment, fRef);
}

function useOpt(fRef) {
  return RescriptRelay_Fragment.useFragmentOpt(fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(fRef)) : undefined, Translation_jargon_graphql.node, convertFragment);
}

var TranslationFragment = {
  Types: undefined,
  Operation: undefined,
  convertFragment: convertFragment,
  use: use,
  useOpt: useOpt
};

function Translation$TranslationRow(props) {
  var commentID = props.commentID;
  var goToComment = function (_event) {
    var element = document.getElementById(commentID);
    if (!(element == null)) {
      element.scrollIntoView({
            block: "center",
            behavior: "smooth"
          });
      return ;
    }
    
  };
  return JsxRuntime.jsx("tr", {
              children: JsxRuntime.jsx("td", {
                    children: props.name,
                    className: "font-normal text-[15px] hover:underline hover:cursor-pointer",
                    onClick: goToComment
                  })
            });
}

var TranslationRow = {
  make: Translation$TranslationRow
};

function Translation(props) {
  var match = use(props.translationRefs);
  var translations = match.translations;
  if (translations.length > 0) {
    return JsxRuntime.jsx("div", {
                children: JsxRuntime.jsx("table", {
                      children: JsxRuntime.jsx("tbody", {
                            children: translations.map(function (param) {
                                  return JsxRuntime.jsx(Translation$TranslationRow, {
                                              name: param.name,
                                              commentID: Core__Option.getOr(Core__Option.map(param.comment, (function (x) {
                                                          return x.id;
                                                        })), "")
                                            }, param.id);
                                })
                          }),
                      className: "table w-full"
                    }),
                className: "overflow-x-auto"
              });
  } else {
    return null;
  }
}

var make = Translation;

export {
  TranslationFragment ,
  TranslationRow ,
  make ,
}
/* react/jsx-runtime Not a pure module */
