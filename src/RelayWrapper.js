// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Exc from "./Exc.js";
import * as React from "react";
import * as Caml_option from "../node_modules/rescript/lib/es6/caml_option.js";
import * as Core__Option from "../node_modules/@rescript/core/src/Core__Option.js";
import * as TokenContext from "./TokenContext.js";
import * as RescriptRelay from "../node_modules/rescript-relay/src/RescriptRelay.js";
import * as RelayRuntime from "relay-runtime";
import * as JsxRuntime from "react/jsx-runtime";

function RelayWrapper(props) {
  var token = React.useContext(TokenContext.context);
  var fetchQuery = async function (operation, variables, _cacheConfig, _uploadables) {
    var resp = await fetch("https://easyword.hasura.app/v1beta1/relay", {
          method: "POST",
          body: Caml_option.some(Core__Option.getExn(JSON.stringify({
                        query: operation.text,
                        variables: variables
                      }), undefined)),
          headers: Caml_option.some(token !== undefined ? new Headers({
                      "content-type": "application/json",
                      authorization: "Bearer " + token
                    }) : new Headers({
                      "content-type": "application/json"
                    }))
        });
    if (resp.ok) {
      return await resp.json();
    }
    throw {
          RE_EXN_ID: Exc.GraphQLError,
          _1: "Request failed: " + resp.statusText,
          Error: new Error()
        };
  };
  var network = RelayRuntime.Network.create(fetchQuery);
  var environment = RescriptRelay.Environment.make(network, RescriptRelay.Store.make(new RelayRuntime.RecordSource(), 10, undefined), undefined, undefined, undefined, undefined, undefined);
  return JsxRuntime.jsx(RescriptRelay.Context.Provider.make, {
              environment: environment,
              children: props.children
            });
}

var make = RelayWrapper;

export {
  make ,
}
/* react Not a pure module */
