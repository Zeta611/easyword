// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Home from "./Home.js";
import * as React from "react";
import * as Jargon from "./Jargon.js";
import * as Js_exn from "../node_modules/rescript/lib/es6/js_exn.js";
import * as Loader from "./Loader.js";
import * as Navbar from "./Navbar.js";
import * as SignIn from "./SignIn.js";
import * as Firebase from "./Firebase.js";
import * as Reactfire from "reactfire";
import * as Caml_option from "../node_modules/rescript/lib/es6/caml_option.js";
import * as Auth from "firebase/auth";
import * as Caml_js_exceptions from "../node_modules/rescript/lib/es6/caml_js_exceptions.js";
import * as AppCheck from "firebase/app-check";
import * as Firestore from "firebase/firestore";
import * as RescriptReactRouter from "../node_modules/@rescript/react/src/RescriptReactRouter.js";

function App(Props) {
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var app = Reactfire.useFirebaseApp();
  var auth = Auth.getAuth(app);
  var appCheck = AppCheck.initializeAppCheck(app, {
        provider: new AppCheck.ReCaptchaV3Provider(Firebase.appCheckToken),
        isTokenAutoRefreshEnabled: true
      });
  var match = Reactfire.useInitFirestore(async function (app) {
        var firestore = Firestore.getFirestore(app);
        try {
          await Firestore.enableMultiTabIndexedDbPersistence(firestore);
        }
        catch (raw_err){
          var err = Caml_js_exceptions.internalToOCamlException(raw_err);
          if (err.RE_EXN_ID === Js_exn.$$Error) {
            console.log(err._1);
          } else {
            throw err;
          }
        }
        return firestore;
      });
  if (match.status !== "success") {
    return React.createElement("div", {
                className: "h-screen grid justify-center content-center"
              }, React.createElement(Loader.make, {}));
  }
  var firestore = match.data;
  if (firestore === undefined) {
    return null;
  }
  var match$1 = url.path;
  var tmp;
  if (match$1) {
    switch (match$1.hd) {
      case "jargon" :
          var match$2 = match$1.tl;
          tmp = match$2 && !match$2.tl ? React.createElement(Jargon.make, {
                  id: match$2.hd
                }) : "404";
          break;
      case "login" :
          tmp = match$1.tl ? "404" : React.createElement(SignIn.make, {});
          break;
      default:
        tmp = "404";
    }
  } else {
    tmp = React.createElement("div", undefined, React.createElement(Navbar.make, {}), React.createElement(Home.make, {}));
  }
  return React.createElement(Reactfire.AppCheckProvider, {
              sdk: appCheck,
              children: React.createElement(Reactfire.AuthProvider, {
                    sdk: auth,
                    children: React.createElement(Reactfire.FirestoreProvider, {
                          sdk: Caml_option.valFromOption(firestore),
                          children: tmp
                        })
                  })
            });
}

var make = App;

export {
  make ,
}
/* Home Not a pure module */
