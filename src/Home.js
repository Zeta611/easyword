// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Util from "./Util.js";
import * as Hooks from "./Hooks.js";
import * as React from "react";
import * as Base64 from "./Base64.js";
import * as HideUs from "./HideUs.js";
import * as SearchBar from "./SearchBar.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.js";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptRelay_Query from "rescript-relay/src/RescriptRelay_Query.js";
import * as ReactErrorBoundary from "react-error-boundary";
import * as HomeJargonListSection from "./HomeJargonListSection.js";
import * as HomeCategoryQuery_graphql from "./__generated__/HomeCategoryQuery_graphql.js";
import * as Outline from "@heroicons/react/24/outline";

var convertVariables = HomeCategoryQuery_graphql.Internal.convertVariables;

var convertResponse = HomeCategoryQuery_graphql.Internal.convertResponse;

var convertWrapRawResponse = HomeCategoryQuery_graphql.Internal.convertWrapRawResponse;

var use = RescriptRelay_Query.useQuery(convertVariables, HomeCategoryQuery_graphql.node, convertResponse);

var useLoader = RescriptRelay_Query.useLoader(convertVariables, HomeCategoryQuery_graphql.node, (function (prim) {
        return prim;
      }));

var usePreloaded = RescriptRelay_Query.usePreloaded(HomeCategoryQuery_graphql.node, convertResponse, (function (prim) {
        return prim;
      }));

var $$fetch = RescriptRelay_Query.$$fetch(HomeCategoryQuery_graphql.node, convertResponse, convertVariables);

var fetchPromised = RescriptRelay_Query.fetchPromised(HomeCategoryQuery_graphql.node, convertResponse, convertVariables);

var retain = RescriptRelay_Query.retain(HomeCategoryQuery_graphql.node, convertVariables);

var CategoryQuery = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables,
  convertResponse: convertResponse,
  convertWrapRawResponse: convertWrapRawResponse,
  use: use,
  useLoader: useLoader,
  usePreloaded: usePreloaded,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  retain: retain
};

function seed() {
  return Math.random() * 2 - 1;
}

function Home(props) {
  var match = React.useState(function () {
        return "";
      });
  var setSearchTerm = match[1];
  var searchTerm = match[0];
  var debouncedSearchTerm = Hooks.useDebounce(searchTerm, 300);
  var match$1 = React.useState(function () {
        return "Chrono";
      });
  var setAxis = match$1[1];
  var axis = match$1[0];
  var match$2 = React.useState(function () {
        return "desc";
      });
  var setDirection = match$2[1];
  var direction = match$2[0];
  var match$3 = React.useState(function () {
        
      });
  var setResetErrorBoundary = match$3[1];
  var resetErrorBoundary = match$3[0];
  var closeDropdown = Hooks.useClosingDropdown("sort-dropdown-btn");
  var onChange = function ($$event) {
    var value = $$event.currentTarget.value;
    if (typeof axis !== "object") {
      axis === "English";
    } else {
      setAxis(function (param) {
            return "Chrono";
          });
    }
    setSearchTerm(function (param) {
          return value;
        });
    if (resetErrorBoundary !== undefined) {
      resetErrorBoundary();
      return setResetErrorBoundary(function (param) {
                  
                });
    }
    
  };
  var filterModalId = "filter-modal";
  var match$4 = React.useState(function () {
        return [];
      });
  var setCategoryIDs = match$4[1];
  var categoryIDs = match$4[0];
  var match$5 = use(undefined, undefined, undefined, undefined);
  var match$6 = React.useState(function () {
        return 0;
      });
  var categoryCnt = match$6[0];
  var options = match$5.category_connection.edges.map(function (edge) {
        var match = edge.node;
        return {
                label: match.acronym + " (" + match.name + ")",
                value: Base64.retrieveOriginalIDInt(match.id)
              };
      });
  if (options.length > 0 && categoryCnt === 0) {
    match$6[1](function (param) {
          return options.length;
        });
    setCategoryIDs(function (param) {
          return options.map(function (param) {
                      return param.value;
                    });
        });
  }
  var tmp;
  tmp = typeof axis !== "object" ? (
      axis === "English" ? (
          direction === "asc" ? JsxRuntime.jsx("i", {
                  className: "fa-solid fa-arrow-down-a-z"
                }) : JsxRuntime.jsx("i", {
                  className: "fa-solid fa-arrow-up-a-z"
                })
        ) : JsxRuntime.jsx(Outline.ClockIcon, {
              className: "h-5 w-5"
            })
    ) : JsxRuntime.jsx("i", {
          className: "fa-solid fa-dice"
        });
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsxs(HideUs.make, {
                      children: [
                        JsxRuntime.jsx("i", {
                              className: "fa-solid fa-arrow-down-a-z"
                            }),
                        JsxRuntime.jsx("i", {
                              className: "fa-solid fa-arrow-up-a-z"
                            }),
                        JsxRuntime.jsx("i", {
                              className: "fa-solid fa-dice"
                            })
                      ]
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("div", {
                              children: JsxRuntime.jsx(SearchBar.make, {
                                    searchTerm: searchTerm,
                                    onChange: onChange
                                  }),
                              className: "flex-auto"
                            }),
                        JsxRuntime.jsx("button", {
                              children: JsxRuntime.jsxs("div", {
                                    children: [
                                      categoryIDs.length !== categoryCnt ? JsxRuntime.jsx("span", {
                                              className: "indicator-item badge badge-accent badge-xs"
                                            }) : null,
                                      JsxRuntime.jsx(Outline.FunnelIcon, {
                                            className: "h-5 w-5"
                                          })
                                    ],
                                    className: "indicator"
                                  }),
                              className: "btn btn-square btn-primary btn-outline text-lg",
                              onClick: (function (param) {
                                  Core__Option.getExn(Core__Option.flatMap(Caml_option.nullable_to_opt(document.getElementById(filterModalId)), Util.asHtmlDialogElement), undefined).showModal();
                                  closeDropdown();
                                })
                            }),
                        JsxRuntime.jsx("button", {
                              children: tmp,
                              className: "btn btn-square btn-primary btn-outline text-lg",
                              onClick: (function (param) {
                                  if (typeof axis !== "object") {
                                    if (axis === "English") {
                                      if (direction === "asc") {
                                        setDirection(function (param) {
                                              return "desc";
                                            });
                                      } else {
                                        setDirection(function (param) {
                                              return "asc";
                                            });
                                      }
                                    }
                                    
                                  } else {
                                    setAxis(function (param) {
                                          return {
                                                  TAG: "Random",
                                                  _0: seed()
                                                };
                                        });
                                    setSearchTerm(function (param) {
                                          return "";
                                        });
                                  }
                                  closeDropdown();
                                })
                            }),
                        JsxRuntime.jsxs("details", {
                              children: [
                                JsxRuntime.jsx("summary", {
                                      children: JsxRuntime.jsx(Outline.ListBulletIcon, {
                                            className: "h-5 w-5"
                                          }),
                                      className: "btn btn-square btn-ghost"
                                    }),
                                JsxRuntime.jsxs("ul", {
                                      children: [
                                        JsxRuntime.jsx("li", {
                                              children: JsxRuntime.jsx("button", {
                                                    children: "최근순",
                                                    onClick: (function (param) {
                                                        setAxis(function (param) {
                                                              return "Chrono";
                                                            });
                                                        setDirection(function (param) {
                                                              return "desc";
                                                            });
                                                        closeDropdown();
                                                      })
                                                  })
                                            }),
                                        JsxRuntime.jsx("li", {
                                              children: JsxRuntime.jsx("button", {
                                                    children: "알파벳순",
                                                    onClick: (function (param) {
                                                        setAxis(function (param) {
                                                              return "English";
                                                            });
                                                        setDirection(function (param) {
                                                              return "asc";
                                                            });
                                                        closeDropdown();
                                                      })
                                                  })
                                            }),
                                        JsxRuntime.jsx("li", {
                                              children: JsxRuntime.jsx("button", {
                                                    children: "무작위순",
                                                    onClick: (function (param) {
                                                        setAxis(function (param) {
                                                              return {
                                                                      TAG: "Random",
                                                                      _0: seed()
                                                                    };
                                                            });
                                                        setSearchTerm(function (param) {
                                                              return "";
                                                            });
                                                        closeDropdown();
                                                      })
                                                  })
                                            })
                                      ],
                                      className: "menu menu-compact dropdown-content text-xs p-1 m-1 w-[6.5rem] shadow bg-zinc-50 dark:bg-zinc-800 rounded-box"
                                    })
                              ],
                              className: "dropdown dropdown-hover dropdown-end text-xs",
                              id: "sort-dropdown-btn"
                            })
                      ],
                      className: "flex items-center space-x-2 sticky top-[4rem] lg:top-[5.25rem] pt-1 -mt-5 mb-5 z-40 bg-base-100"
                    }),
                JsxRuntime.jsxs("dialog", {
                      children: [
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx("h3", {
                                      children: "분야 필터",
                                      className: "font-bold text-lg"
                                    }),
                                JsxRuntime.jsxs("div", {
                                      children: [
                                        JsxRuntime.jsx("button", {
                                              children: "모두 선택",
                                              className: "m-1 p-2 badge badge-lg badge-neutral",
                                              onClick: (function (param) {
                                                  setCategoryIDs(function (param) {
                                                        return options.map(function (param) {
                                                                    return param.value;
                                                                  });
                                                      });
                                                })
                                            }),
                                        JsxRuntime.jsx("button", {
                                              children: "모두 해제",
                                              className: "m-1 p-2 badge badge-lg",
                                              onClick: (function (param) {
                                                  setCategoryIDs(function (param) {
                                                        return [];
                                                      });
                                                })
                                            })
                                      ],
                                      className: "flex py-1"
                                    }),
                                JsxRuntime.jsx("ul", {
                                      children: options.map(function (param) {
                                            var value = param.value;
                                            return JsxRuntime.jsx("li", {
                                                        children: JsxRuntime.jsx("button", {
                                                              children: param.label,
                                                              className: "badge badge-lg " + (
                                                                categoryIDs.includes(value) ? "badge-primary" : ""
                                                              ),
                                                              onClick: (function (param) {
                                                                  setCategoryIDs(function (categoryIDs) {
                                                                        if (categoryIDs.includes(value)) {
                                                                          return categoryIDs.filter(function (v) {
                                                                                      return v !== value;
                                                                                    });
                                                                        } else {
                                                                          return Belt_Array.concatMany([
                                                                                      [value],
                                                                                      categoryIDs
                                                                                    ]);
                                                                        }
                                                                      });
                                                                })
                                                            }),
                                                        className: "p-1"
                                                      }, value.toString());
                                          }),
                                      className: "py-2 flex flex-wrap"
                                    }),
                                JsxRuntime.jsx("div", {
                                      children: JsxRuntime.jsx("form", {
                                            children: JsxRuntime.jsx("button", {
                                                  children: "✕",
                                                  className: "btn btn-sm btn-circle btn-ghost absolute right-2 top-2"
                                                }),
                                            method: "dialog"
                                          }),
                                      className: "modal-action"
                                    })
                              ],
                              className: "modal-box overflow-visible"
                            }),
                        JsxRuntime.jsx("form", {
                              children: JsxRuntime.jsx("button", {
                                    className: "cursor-default"
                                  }),
                              className: "modal-backdrop",
                              method: "dialog"
                            })
                      ],
                      className: "modal modal-bottom sm:modal-middle",
                      id: filterModalId
                    }),
                JsxRuntime.jsx(ReactErrorBoundary.ErrorBoundary, {
                      children: JsxRuntime.jsx(HomeJargonListSection.make, {
                            searchTerm: debouncedSearchTerm,
                            categoryIDs: categoryIDs,
                            axis: axis,
                            direction: direction
                          }),
                      fallbackRender: (function (param) {
                          var resetErrorBoundary = param.resetErrorBoundary;
                          console.error(param.error);
                          setResetErrorBoundary(function (param) {
                                return resetErrorBoundary;
                              });
                          return null;
                        })
                    })
              ],
              className: "grid p-5 text-sm"
            });
}

var make = Home;

export {
  CategoryQuery ,
  seed ,
  make ,
}
/* use Not a pure module */
